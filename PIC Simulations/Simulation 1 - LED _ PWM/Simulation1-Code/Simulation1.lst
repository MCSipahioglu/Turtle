;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 14/02/2021 06:39:40
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF6D  	GOTO        218
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_setup_Init:
;Simulation1.c,80 :: 		void setup_Init() {               //Setup_Init will initialize anything that requires initialization.
;Simulation1.c,81 :: 		PTCON0=0b00000000;           //1:1 Post Scale, PWM input clock=Osc/4, Free Running Mode.
0x001C	0x6A7F      	CLRF        PTCON0 
;Simulation1.c,82 :: 		PTCON1=0b10000000;           //PWM time base is on, counting up. Least significant 6 bits arenWt used.
0x001E	0x0E80      	MOVLW       128
0x0020	0x6E7E      	MOVWF       PTCON1 
;Simulation1.c,83 :: 		PWMCON0=0b00111111;          //PWM0-PWM3 (RB0-RB3) are in PWM mode, even pins are in complementary mode. (PWM0 to PWM3 are independent regardless.)
0x0022	0x0E3F      	MOVLW       63
0x0024	0x6E6F      	MOVWF       PWMCON0 
;Simulation1.c,84 :: 		PWMCON1=0b00000001;          //Special Event Registers somewhat default, Updates are enabled and synchronized to time base.
0x0026	0x0E01      	MOVLW       1
0x0028	0x6E6E      	MOVWF       PWMCON1 
;Simulation1.c,85 :: 		PTMRH=0b00000000;            //PTMR keeps track of current base time in the pwm cycle, initialize to 0.
0x002A	0x6A7C      	CLRF        PTMRH 
;Simulation1.c,86 :: 		PTMRL=0b00000000;            //PTMR will be resetting when it reaches PTPER. (period)
0x002C	0x6A7D      	CLRF        PTMRL 
;Simulation1.c,87 :: 		PTPERH=0b00000001;           //PTPER=(T_Pwm*f_osc)/(4*PTMRPS) -1. PTMRPS=Prescaler=1.
0x002E	0x0E01      	MOVLW       1
0x0030	0x6E7A      	MOVWF       PTPERH 
;Simulation1.c,88 :: 		PTPERL=0b11111111;
0x0032	0x0EFF      	MOVLW       255
0x0034	0x6E7B      	MOVWF       PTPERL 
;Simulation1.c,91 :: 		ANSEL0=0x00;
0x0036	0x6AB8      	CLRF        ANSEL0 
;Simulation1.c,92 :: 		ANSEL1=0x00;
0x0038	0x6AB9      	CLRF        ANSEL1 
;Simulation1.c,93 :: 		}
L_end_setup_Init:
0x003A	0x0012      	RETURN      0
; end of _setup_Init
_pwm_demo:
;Simulation1.c,97 :: 		void pwm_demo(){
;Simulation1.c,98 :: 		int pwm=0;                   //Pwm demo by changing the pwm signal and seeing the output from the PROTEUS oscillator.
0x003C	0x6A15      	CLRF        pwm_demo_pwm_L0 
0x003E	0x6A16      	CLRF        pwm_demo_pwm_L0+1 
;Simulation1.c,99 :: 		STBY_R=1;                    //STBY should be high for the motors to work.
0x0040	0x8480      	BSF         RA2_bit, BitPos(RA2_bit+0) 
;Simulation1.c,100 :: 		STBY_L=1;                    //Set an initial direction for the motors.
0x0042	0x8680      	BSF         RA3_bit, BitPos(RA3_bit+0) 
;Simulation1.c,101 :: 		DIR_R_F_1=1;
0x0044	0x8082      	BSF         RC0_bit, BitPos(RC0_bit+0) 
;Simulation1.c,102 :: 		DIR_R_F_2=0;
0x0046	0x9282      	BCF         RC1_bit, BitPos(RC1_bit+0) 
;Simulation1.c,103 :: 		DIR_R_B_1=0;
0x0048	0x9482      	BCF         RC2_bit, BitPos(RC2_bit+0) 
;Simulation1.c,104 :: 		DIR_R_B_2=1;
0x004A	0x8682      	BSF         RC3_bit, BitPos(RC3_bit+0) 
;Simulation1.c,105 :: 		DIR_L_F_1=1;
0x004C	0x8083      	BSF         RD0_bit, BitPos(RD0_bit+0) 
;Simulation1.c,106 :: 		DIR_L_F_2=0;
0x004E	0x9283      	BCF         RD1_bit, BitPos(RD1_bit+0) 
;Simulation1.c,107 :: 		DIR_L_B_1=0;
0x0050	0x9483      	BCF         RD2_bit, BitPos(RD2_bit+0) 
;Simulation1.c,108 :: 		DIR_L_B_2=1;
0x0052	0x8683      	BSF         RD3_bit, BitPos(RD3_bit+0) 
;Simulation1.c,113 :: 		for(pwm=1;pwm<4096;pwm++){
0x0054	0x0E01      	MOVLW       1
0x0056	0x6E15      	MOVWF       pwm_demo_pwm_L0 
0x0058	0x0E00      	MOVLW       0
0x005A	0x6E16      	MOVWF       pwm_demo_pwm_L0+1 
L_pwm_demo0:
0x005C	0x0E80      	MOVLW       128
0x005E	0x1816      	XORWF       pwm_demo_pwm_L0+1, 0 
0x0060	0x6E00      	MOVWF       R0 
0x0062	0x0E80      	MOVLW       128
0x0064	0x0A10      	XORLW       16
0x0066	0x5C00      	SUBWF       R0, 0 
0x0068	0xE102      	BNZ         L__pwm_demo9
0x006A	0x0E00      	MOVLW       0
0x006C	0x5C15      	SUBWF       pwm_demo_pwm_L0, 0 
L__pwm_demo9:
0x006E	0xE223      	BC          L_pwm_demo1
;Simulation1.c,114 :: 		PDC0H=HIGH_BYTE(4096-pwm);
0x0070	0x5015      	MOVF        pwm_demo_pwm_L0, 0 
0x0072	0x0800      	SUBLW       0
0x0074	0x6E03      	MOVWF       R3 
0x0076	0xF004C016  	MOVFF       pwm_demo_pwm_L0+1, R4
0x007A	0x0E10      	MOVLW       16
0x007C	0x5604      	SUBFWB      R4, 1 
0x007E	0xF000C004  	MOVFF       R4, R0
0x0082	0x0E00      	MOVLW       0
0x0084	0xBE04      	BTFSC       R4, 7 
0x0086	0x0EFF      	MOVLW       255
0x0088	0x6E01      	MOVWF       R1 
0x008A	0x0EFF      	MOVLW       255
0x008C	0x1400      	ANDWF       R0, 0 
0x008E	0x6E01      	MOVWF       R1 
0x0090	0xFF78C001  	MOVFF       R1, PDC0H
;Simulation1.c,115 :: 		PDC0L=LOW_BYTE(4096-pwm);
0x0094	0x0EFF      	MOVLW       255
0x0096	0x1403      	ANDWF       R3, 0 
0x0098	0x6E00      	MOVWF       R0 
0x009A	0xFF79C000  	MOVFF       R0, PDC0L
;Simulation1.c,116 :: 		PDC1H=HIGH_BYTE(4096-pwm);
0x009E	0xFF76C001  	MOVFF       R1, PDC1H
;Simulation1.c,117 :: 		PDC1L=LOW_BYTE(4096-pwm);
0x00A2	0xFF77C000  	MOVFF       R0, PDC1L
;Simulation1.c,118 :: 		Delay_us(10);
0x00A6	0x0E10      	MOVLW       16
0x00A8	0x6E0D      	MOVWF       R13, 0
L_pwm_demo3:
0x00AA	0x2E0D      	DECFSZ      R13, 1, 0
0x00AC	0xD7FE      	BRA         L_pwm_demo3
0x00AE	0x0000      	NOP
;Simulation1.c,113 :: 		for(pwm=1;pwm<4096;pwm++){
0x00B0	0x4A15      	INFSNZ      pwm_demo_pwm_L0, 1 
0x00B2	0x2A16      	INCF        pwm_demo_pwm_L0+1, 1 
;Simulation1.c,119 :: 		}
0x00B4	0xD7D3      	BRA         L_pwm_demo0
L_pwm_demo1:
;Simulation1.c,120 :: 		}
L_end_pwm_demo:
0x00B6	0x0012      	RETURN      0
; end of _pwm_demo
_setup_IO:
;Simulation1.c,61 :: 		void setup_IO() {                 //Setup_IO will assign input and output pins. (Output 0, Input 1)
;Simulation1.c,62 :: 		STBY_R_TRIS=0;               //OUTPUTS
0x00B8	0x9492      	BCF         TRISA2_bit, BitPos(TRISA2_bit+0) 
;Simulation1.c,63 :: 		STBY_L_TRIS=0;
0x00BA	0x9692      	BCF         TRISA3_bit, BitPos(TRISA3_bit+0) 
;Simulation1.c,64 :: 		PWM_R_F_TRIS=0;
0x00BC	0x9093      	BCF         TRISB0_bit, BitPos(TRISB0_bit+0) 
;Simulation1.c,65 :: 		PWM_R_B_TRIS=0;
0x00BE	0x9293      	BCF         TRISB1_bit, BitPos(TRISB1_bit+0) 
;Simulation1.c,66 :: 		PWM_L_F_TRIS=0;
0x00C0	0x9493      	BCF         TRISB2_bit, BitPos(TRISB2_bit+0) 
;Simulation1.c,67 :: 		PWM_L_B_TRIS=0;
0x00C2	0x9693      	BCF         TRISB3_bit, BitPos(TRISB3_bit+0) 
;Simulation1.c,68 :: 		LED1_TRIS=0;
0x00C4	0x9893      	BCF         TRISB4_bit, BitPos(TRISB4_bit+0) 
;Simulation1.c,69 :: 		LED2_TRIS=0;
0x00C6	0x9A93      	BCF         TRISB5_bit, BitPos(TRISB5_bit+0) 
;Simulation1.c,70 :: 		DIR_R_F_1_TRIS=0;
0x00C8	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;Simulation1.c,71 :: 		DIR_R_F_2_TRIS=0;
0x00CA	0x9294      	BCF         TRISC1_bit, BitPos(TRISC1_bit+0) 
;Simulation1.c,72 :: 		DIR_R_B_1_TRIS=0;
0x00CC	0x9494      	BCF         TRISC2_bit, BitPos(TRISC2_bit+0) 
;Simulation1.c,73 :: 		DIR_R_B_2_TRIS=0;
0x00CE	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;Simulation1.c,74 :: 		DIR_L_F_1_TRIS=0;
0x00D0	0x9095      	BCF         TRISD0_bit, BitPos(TRISD0_bit+0) 
;Simulation1.c,75 :: 		DIR_L_F_2_TRIS=0;
0x00D2	0x9295      	BCF         TRISD1_bit, BitPos(TRISD1_bit+0) 
;Simulation1.c,76 :: 		DIR_L_B_1_TRIS=0;
0x00D4	0x9495      	BCF         TRISD2_bit, BitPos(TRISD2_bit+0) 
;Simulation1.c,77 :: 		DIR_L_B_2_TRIS=0;
0x00D6	0x9695      	BCF         TRISD3_bit, BitPos(TRISD3_bit+0) 
;Simulation1.c,78 :: 		}
L_end_setup_IO:
0x00D8	0x0012      	RETURN      0
; end of _setup_IO
_main:
;Simulation1.c,123 :: 		void main() {
;Simulation1.c,124 :: 		setup_IO();
0x00DA	0xDFEE      	RCALL       _setup_IO
;Simulation1.c,125 :: 		setup_Init();
0x00DC	0xDF9F      	RCALL       _setup_Init
;Simulation1.c,127 :: 		LED1=1; //Initialize the leds for the led demo, and simulate in the main loop.
0x00DE	0x8881      	BSF         RB4_bit, BitPos(RB4_bit+0) 
;Simulation1.c,128 :: 		LED2=0;
0x00E0	0x9A81      	BCF         RB5_bit, BitPos(RB5_bit+0) 
;Simulation1.c,130 :: 		while(1){
L_main4:
;Simulation1.c,132 :: 		pwm_demo();
0x00E2	0xDFAC      	RCALL       _pwm_demo
;Simulation1.c,133 :: 		LED1= !LED1;
0x00E4	0x7881      	BTG         RB4_bit, BitPos(RB4_bit+0) 
;Simulation1.c,134 :: 		LED2= !LED2;
0x00E6	0x7A81      	BTG         RB5_bit, BitPos(RB5_bit+0) 
;Simulation1.c,135 :: 		}
0x00E8	0xD7FC      	BRA         L_main4
;Simulation1.c,136 :: 		}
L_end_main:
0x00EA	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [32]    _setup_Init
0x003C     [124]    _pwm_demo
0x00B8      [34]    _setup_IO
0x00DA      [18]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    pwm_demo_pwm_L0
0x0F6E       [1]    PWMCON1
0x0F6F       [1]    PWMCON0
0x0F76       [1]    PDC1H
0x0F77       [1]    PDC1L
0x0F78       [1]    PDC0H
0x0F79       [1]    PDC0L
0x0F7A       [1]    PTPERH
0x0F7B       [1]    PTPERL
0x0F7C       [1]    PTMRH
0x0F7D       [1]    PTMRL
0x0F7E       [1]    PTCON1
0x0F7F       [1]    PTCON0
0x0F80       [0]    STBY_R
0x0F80       [0]    STBY_L
0x0F80       [0]    RA2_bit
0x0F80       [0]    RA3_bit
0x0F81       [0]    RB4_bit
0x0F81       [0]    RB5_bit
0x0F81       [0]    LED1
0x0F81       [0]    LED2
0x0F82       [0]    RC2_bit
0x0F82       [0]    RC3_bit
0x0F82       [0]    DIR_R_F_2
0x0F82       [0]    DIR_R_F_1
0x0F82       [0]    DIR_R_B_1
0x0F82       [0]    DIR_R_B_2
0x0F82       [0]    RC1_bit
0x0F82       [0]    RC0_bit
0x0F83       [0]    RD2_bit
0x0F83       [0]    RD3_bit
0x0F83       [0]    RD1_bit
0x0F83       [0]    RD0_bit
0x0F83       [0]    DIR_L_F_2
0x0F83       [0]    DIR_L_B_1
0x0F83       [0]    DIR_L_F_1
0x0F83       [0]    DIR_L_B_2
0x0F92       [0]    TRISA2_bit
0x0F92       [0]    TRISA3_bit
0x0F92       [0]    STBY_R_TRIS
0x0F92       [0]    STBY_L_TRIS
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    TRISB3_bit
0x0F93       [0]    TRISB0_bit
0x0F93       [0]    TRISB1_bit
0x0F93       [0]    TRISB4_bit
0x0F93       [0]    TRISB5_bit
0x0F93       [0]    PWM_R_F_TRIS
0x0F93       [0]    LED1_TRIS
0x0F93       [0]    LED2_TRIS
0x0F93       [0]    PWM_L_B_TRIS
0x0F93       [0]    PWM_R_B_TRIS
0x0F93       [0]    PWM_L_F_TRIS
0x0F94       [0]    DIR_R_B_1_TRIS
0x0F94       [0]    DIR_R_F_2_TRIS
0x0F94       [0]    DIR_R_F_1_TRIS
0x0F94       [0]    DIR_R_B_2_TRIS
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    TRISC1_bit
0x0F95       [0]    DIR_L_B_2_TRIS
0x0F95       [0]    DIR_L_B_1_TRIS
0x0F95       [0]    DIR_L_F_1_TRIS
0x0F95       [0]    DIR_L_F_2_TRIS
0x0F95       [0]    TRISD0_bit
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD3_bit
0x0FB8       [1]    ANSEL0
0x0FB9       [1]    ANSEL1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
